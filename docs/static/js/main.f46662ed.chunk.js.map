{"version":3,"sources":["utils/Reducer.ts","utils/Cells.ts","utils/Selector.ts","utils/Lists.ts","board/Reducer.ts","utils/Constraint.ts","utils/Styles.ts","hover/ConstraintOverlay.tsx","utils/Actions.ts","options/Reducer.ts","board/Cell.tsx","board/Board.tsx","coordsOverlay/CoordsSquare.tsx","coordsOverlay/CoordsOverlay.tsx","options/OptionCheckbox.tsx","options/OptionsPanel.tsx","options/LoadButton.tsx","options/LoadPanel.tsx","options/GeneratePanel.tsx","options/AllOptionsPanel.tsx","app/Title.tsx","constraints/components/ConstraintInfo.tsx","constraints/Selectors.ts","constraints/components/SelectedConstraints.tsx","constraints/components/ActionButton.tsx","constraints/components/ConstraintActions.tsx","constraints/components/ComplexConstraint.tsx","constraints/components/ConstraintList.tsx","constraints/Reducer.ts","app/Reducer.ts","app/Store.ts","app/Component.tsx","serviceWorker.ts","index.tsx"],"names":["ReducerBuilder","initialState","cases","this","type","func","reduce","obj","state","action","createReducer","neighbours","x","y","sliceSelector","slice","selectorCreator","selector","arg","extendSelector","oldSelector","extension","oldOut","useArgSelector","reduxUseSelector","useSelector","chunk","array","chunkSize","out","i","length","push","INITIAL_STATE","cells","generateCells","lost","width","height","mines","totalSize","clearCellCount","Math","min","clearCells","Array","fill","stateKnown","isMine","knownCells","mineCells","temp","j","floor","random","shuffle","reducer","create","addCase","cell","getInternalCell","start","known","loadCells","build","selectCells","s","selectWidth","selectHeight","selectMineCount","flatMap","row","filter","selectRemainingMineCount","column","selectHasWon","every","coordinate","getCell","internalCell","cellState","map","coord","cellStateKnown","selectCell","selectCellState","selectCellStateKnown","getNeighbours","c","selectConstraint","unknownNeighbours","mineNeighbours","hiddenMines","coords","minMines","maxMines","selectUnknownCells","selectCoords","canClear","constraint","canFlag","mergeConstraints","c1","c2","coords1","coords2","inConstraint","constraintEquals","max","x1","y1","some","x2","y2","removeCoord","cellCleared","newCoords","newMin","newMax","cellFlagged","clearConstraint","dispatch","forEach","flagConstraint","gridStyle","gridTemplateColumns","gridTemplateRows","targetColor","constraints","firstColor","secondColor","Component","selectConstraints","colorSelector","className","style","key","background","useDispatch","reduxUseDispatch","showRemaining","cheatMode","autoZero","autoClear","autoFlag","showCoords","showSubtraction","showReduce","showMerge","showBoardConstraint","showOptions","resolveComplex","option","value","options","Object","assign","selectCheatMode","selectAutoZero","selectAutoClear","selectAutoFlag","selectShowRemaining","selectShowCoords","selectShowSubtraction","selectShowReduce","selectShowMerge","selectShowComplexConstraints","selectShowBoardConstraint","selectShowOptions","selectResolveComplex","props","text","toString","onPointerEnter","undefined","onPointerLeave","onClick","e","preventDefault","stopPropagation","Cell","index","idx","CoordsSquare","enabled","name","checked","onChange","target","OptionCheckbox","save","real","basicTraining","subtractionTraining1","subtractionTraining2","reduceTraining1","reduceTraining2","wholeBoardTraining","LoadButton","Number","parseInt","show","onMouseEnter","onMouseLeave","hidden","OptionsPanel","LoadPanel","GeneratePanel","getConstraintInfo","cellCount","cellsString","exact","minesCount","minesString","getConstraintComplex","constraintName","constraintsSelector","selectFirstWrapped","first","selectSecondWrapped","second","selectTargets","targets","selectAnySelected","selectSubtract","big","small","clampedMin","clampedMax","subtractConstraints","selectMerge","selectReduce","reduceConstraints","selectComplexConstraints","complexConstraints","ConstraintInfo","nonSolvable","canDeselect","subtractProduces","reduceProduces","mergeProduces","subtracted","reduced","merged","clearable","flaggable","onContextMenu","unknownCells","mineCount","wholeBoardConstraint","ComplexConstraint","JSON","stringify","resetSelected","_","splice","combineReducers","board","boardReducer","constraintReducer","optionsReducer","store","createStore","devToolsEnhancer","App","Title","CoordsOverlay","Board","SelectedConstraints","ConstraintActions","ConstraintList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f46662ed.chunk.js","sourcesContent":["import { Action, Reducer, createReducer, CaseReducers } from \"@reduxjs/toolkit\";\r\nimport { ExtractType } from \"./Actions\";\r\n\r\nexport type ReducerCase<State, A extends Action> = [\r\n  ExtractType<A>,\r\n  (state: State, action: A) => void\r\n];\r\n\r\nexport class ReducerBuilder<State, Actions extends Action> {\r\n  readonly cases: Array<ReducerCase<State, Actions>>;\r\n  readonly initialState: State;\r\n\r\n  static create<State>(initialState: State): ReducerBuilder<State, never> {\r\n    return new ReducerBuilder<State, never>(initialState, []);\r\n  }\r\n\r\n  private constructor(\r\n    initialState: State,\r\n    cases: Array<ReducerCase<State, Actions>>\r\n  ) {\r\n    this.initialState = initialState;\r\n    this.cases = cases;\r\n  }\r\n\r\n  addCase<A extends Action>(\r\n    ...[type, func]: ReducerCase<State, A>\r\n  ): ReducerBuilder<State, Actions | A> {\r\n    const cases = [...this.cases, [type, func]] as Array<\r\n      ReducerCase<State, Actions | A>\r\n    >;\r\n    return new ReducerBuilder<State, Actions | A>(this.initialState, cases);\r\n  }\r\n\r\n  build(): Reducer<State, Actions> {\r\n    const cases: CaseReducers<\r\n      State,\r\n      Record<string, Actions>\r\n    > = this.cases.reduce(\r\n      (obj, [type, func]) => {\r\n        obj[type] = (state: State, action: Actions) => {\r\n          func(state, action);\r\n          return state;\r\n        };\r\n        return obj;\r\n    },\r\n      {} as any\r\n    );\r\n    return createReducer(this.initialState, cases);\r\n  }\r\n}\r\n","export type ClearedState = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\nexport type MineState = \"X\";\r\nexport type CellState = ClearedState | MineState;\r\nexport type Coordinate = Readonly<[number, number]>;\r\nexport function neighbours(...[x,y]: Coordinate): Coordinate[]{\r\n  return [\r\n    [x - 1, y],\r\n    [x - 1, y - 1],\r\n    [x, y - 1],\r\n    [x + 1, y - 1],\r\n    [x + 1, y],\r\n    [x + 1, y + 1],\r\n    [x, y + 1],\r\n    [x - 1, y + 1]\r\n  ];\r\n}\r\nexport type Cell = {\r\n  coordinate: Coordinate;\r\n  cellState: CellState;\r\n  cellStateKnown: boolean;\r\n};\r\n","import { useSelector as reduxUseSelector } from \"react-redux\";\r\nimport { RootState } from \"../app/Reducer\";\r\n\r\ntype SliceSelector<SliceName extends keyof RootState> = (\r\n  state: RootState\r\n) => RootState[SliceName];\r\nexport function sliceSelector<Slice extends keyof RootState>(\r\n  slice: Slice\r\n): SliceSelector<Slice> {\r\n  return (state: RootState) => {\r\n    return state[slice];\r\n  };\r\n}\r\n\r\nexport type ArgSelector<T, ARG> = (state: RootState, arg: ARG) => T;\r\nexport type Selector<T> = ArgSelector<T, {}>;\r\ntype SelectorCreator<State> = <T, ARG>(\r\n  selector: (state: State, arg: ARG) => T\r\n) => ArgSelector<T, ARG>;\r\nexport function selectorCreator<State>(\r\n  sliceSelector: (state: RootState) => State\r\n): SelectorCreator<State> {\r\n  return function<T, ARG>(\r\n    selector: (state: State, arg: ARG) => T\r\n  ) {\r\n    return (state: RootState, arg: ARG) => {\r\n      return selector(sliceSelector(state), arg);\r\n    };\r\n  };\r\n}\r\n\r\nexport function extendSelector<T_1, ARG_1, T_2, ARG_2>(\r\n  oldSelector: ArgSelector<T_1, ARG_1>,\r\n  extension: (oldOutput: NonNullable<T_1>, arg: ARG_1 & ARG_2) => T_2\r\n): ArgSelector<T_2, ARG_1 & ARG_2> {\r\n  const newSelector: ArgSelector<T_2 | null, ARG_1 & ARG_2> = (\r\n    state: RootState,\r\n    arg: ARG_1 & ARG_2\r\n  ) => {\r\n    const oldOut = oldSelector(state, arg);\r\n    if (oldOut == null) return null;\r\n    return extension(oldOut as NonNullable<T_1>, arg);\r\n  };\r\n  return newSelector as any;\r\n}\r\n\r\nexport function useArgSelector<T, ARG>(\r\n  selector: ArgSelector<T, ARG>,\r\n  arg: ARG\r\n): T {\r\n  return reduxUseSelector((state: RootState) => selector(state, arg));\r\n}\r\nexport function useSelector<T>(selector: ArgSelector<T, {}>): T {\r\n  return reduxUseSelector((state: RootState) => selector(state, {}));\r\n}\r\n","export interface Matrix<T> extends Array<Array<T>> {}\r\n\r\nexport function shuffle<T>(array: T[]): T[] {\r\n  let temp: T;\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function chunk<T>(array: T[], chunkSize: number): T[][] {\r\n    const out: T[][] = [];\r\n    for(let i = 0; i < array.length; i += chunkSize){\r\n        out.push(array.slice(i, i+chunkSize));\r\n    }\r\n    return out;\r\n}\r\n","import { ReducerBuilder } from \"../utils/Reducer\";\r\nimport { Cell, Coordinate, neighbours, CellState } from \"../utils/Cells\";\r\nimport { Constraint } from \"../utils/Constraint\";\r\nimport { Action } from \"@reduxjs/toolkit\";\r\nimport {\r\n  sliceSelector,\r\n  selectorCreator,\r\n  extendSelector\r\n} from \"../utils/Selector\";\r\nimport { Matrix, shuffle, chunk } from \"../utils/Lists\";\r\nimport { Save } from \"../options/LoadPanel\";\r\n\r\ntype InternalCell = {\r\n  stateKnown: boolean;\r\n  isMine: boolean;\r\n};\r\n\r\ntype State = {\r\n  cells: Matrix<InternalCell>;\r\n  lost: boolean;\r\n};\r\n\r\nconst INITIAL_STATE: State = {\r\n  cells: generateCells(14, 7, 25),\r\n  lost: false\r\n};\r\n\r\nfunction generateCells(\r\n  width: number,\r\n  height: number,\r\n  mines: number\r\n): Matrix<InternalCell> {\r\n  const totalSize = width * height;\r\n  const clearCellCount = totalSize - mines;\r\n  mines = Math.min(totalSize - 1, mines);\r\n\r\n  const clearCells: InternalCell[] = Array(clearCellCount - 1).fill({\r\n    stateKnown: false,\r\n    isMine: false\r\n  });\r\n  const knownCells: InternalCell[] = Array(1).fill({\r\n    stateKnown: true,\r\n    isMine: false\r\n  });\r\n  const mineCells: InternalCell[] = Array(mines).fill({\r\n    stateKnown: false,\r\n    isMine: true\r\n  });\r\n\r\n  const cells = shuffle([...clearCells, ...knownCells, ...mineCells]);\r\n  return chunk(cells, height);\r\n}\r\n\r\nfunction loadCells(\r\n  mines: Matrix<0 | 1>,\r\n  known: Coordinate\r\n): Matrix<InternalCell> {\r\n  const height = mines[0].length;\r\n\r\n  const cells: InternalCell[] = [];\r\n  for (let x = 0; x < mines.length; x++) {\r\n    for (let y = 0; y < height; y++) {\r\n      const cell: InternalCell = {\r\n        stateKnown: x === known[0] && y === known[1],\r\n        isMine: mines[x][y] === 1\r\n      };\r\n      cells.push(cell);\r\n    }\r\n  }\r\n\r\n  return chunk(cells, height);\r\n}\r\n\r\n// Reducer\r\nexport const reducer = ReducerBuilder.create(INITIAL_STATE)\r\n  .addCase(\"CLEAR_CELL\", (state, action: ClearCellAction) => {\r\n    const cell = getInternalCell(state, action);\r\n    if (cell === null) return state;\r\n\r\n    if (cell.isMine) {\r\n      state.lost = true;\r\n    } else {\r\n      cell.stateKnown = true;\r\n    }\r\n  })\r\n  .addCase(\"FLAG_CELL\", (state, action: FlagCellAction) => {\r\n    const cell = getInternalCell(state, action);\r\n    if (cell === null) return state;\r\n\r\n    if (cell.isMine) {\r\n      cell.stateKnown = true;\r\n    } else {\r\n      state.lost = true;\r\n    }\r\n  })\r\n  .addCase(\r\n    \"REGENERATE_BOARD\",\r\n    (state, { width, height, mines }: RegenerateBoardAction) => {\r\n      state.cells = generateCells(width, height, mines);\r\n    }\r\n  )\r\n  .addCase(\"LOAD_BOARD\", (state, { mines, start }: LoadBoardAction) => {\r\n    state.cells = loadCells(mines, start);\r\n  })\r\n  .build();\r\n\r\n// Actions\r\nexport type ClearCellAction = Action<\"CLEAR_CELL\"> & { coordinate: Coordinate };\r\nexport type FlagCellAction = Action<\"FLAG_CELL\"> & { coordinate: Coordinate };\r\nexport type RegenerateBoardAction = Action<\"REGENERATE_BOARD\"> & {\r\n  width: number;\r\n  height: number;\r\n  mines: number;\r\n};\r\nexport type LoadBoardAction = Action<\"LOAD_BOARD\"> & Save;\r\n\r\n// Selectors\r\nexport const selectSlice = sliceSelector(\"board\");\r\nexport const selector = selectorCreator(selectSlice);\r\n\r\nexport const selectCells = selector(s => s.cells);\r\nexport const selectWidth = extendSelector(selectCells, cells => cells.length);\r\nexport const selectHeight = extendSelector(\r\n  selectCells,\r\n  cells => cells[0].length\r\n);\r\n\r\nexport const selectMineCount = extendSelector(\r\n  selectCells,\r\n  cells => cells.flatMap(row => row).filter(cell => cell.isMine).length\r\n);\r\nexport const selectRemainingMineCount = extendSelector(\r\n  selectCells,\r\n  cells =>\r\n    cells\r\n      .flatMap(column => column)\r\n      .filter(cell => cell.isMine && !cell.stateKnown).length\r\n);\r\nexport const selectHasWon = extendSelector(selectCells, cells =>\r\n  cells.every(column => column.every(cell => cell.stateKnown))\r\n);\r\n\r\nfunction getInternalCell(\r\n  state: State,\r\n  { coordinate: [x, y] }: { coordinate: Coordinate }\r\n): InternalCell | null {\r\n  const column = state.cells[x];\r\n  if (column == null) return null;\r\n  const cell = column[y];\r\n  if (cell == null) return null;\r\n  return cell;\r\n}\r\nfunction getCell(state: State, arg: { coordinate: Coordinate }): Cell | null {\r\n  const internalCell = getInternalCell(state, arg);\r\n  if (internalCell == null) return null;\r\n  const stateKnown = internalCell.stateKnown;\r\n  const cellState = internalCell.isMine\r\n    ? \"X\"\r\n    : neighbours(...arg.coordinate)\r\n        .map(coord => getInternalCell(state, { coordinate: coord }))\r\n        .filter(cell => cell !== null && cell.isMine).length;\r\n  return {\r\n    coordinate: arg.coordinate,\r\n    cellState: cellState as CellState,\r\n    cellStateKnown: stateKnown\r\n  };\r\n}\r\nexport const selectCell = selector(getCell);\r\nexport const selectCellState = extendSelector(\r\n  selectCell,\r\n  cell => cell.cellState\r\n);\r\nexport const selectCellStateKnown = extendSelector(\r\n  selectCell,\r\n  cell => cell.cellStateKnown\r\n);\r\n\r\nfunction getNeighbours(\r\n  state: State,\r\n  { coordinate }: { coordinate: Coordinate }\r\n): Array<Cell> {\r\n  const neighbourCoords = neighbours(...coordinate);\r\n  const neighbourCells = neighbourCoords\r\n    .map(([x, y]) => getCell(state, { coordinate: [x, y] }))\r\n    .filter(c => c != null);\r\n  return neighbourCells as Array<Cell>;\r\n}\r\nexport const selectNeighbours = selector(getNeighbours);\r\nexport const selectUnknownNeighbours = extendSelector(selectNeighbours, cells =>\r\n  cells.filter(cell => !cell.cellStateKnown)\r\n);\r\n\r\nfunction getConstraint(\r\n  state: State,\r\n  { coordinate: [x, y] }: { coordinate: Coordinate }\r\n): Constraint | null {\r\n  const cell = getCell(state, { coordinate: [x, y] });\r\n  if (cell == null) return null;\r\n  if (!cell.cellStateKnown) return null;\r\n  if (cell.cellState === \"X\") return null;\r\n\r\n  const neighbours = getNeighbours(state, { coordinate: [x, y] });\r\n  const unknownNeighbours = neighbours\r\n    .filter(cell => !cell.cellStateKnown)\r\n    .map(cell => cell.coordinate);\r\n  if (unknownNeighbours.length === 0) return null;\r\n\r\n  const mineNeighbours = neighbours.filter(\r\n    cell => cell.cellStateKnown && cell.cellState === \"X\"\r\n  );\r\n\r\n  const number = cell.cellState;\r\n  const hiddenMines = number - mineNeighbours.length;\r\n  return {\r\n    coords: unknownNeighbours,\r\n    minMines: hiddenMines,\r\n    maxMines: hiddenMines\r\n  };\r\n}\r\nexport const selectConstraint = selector(getConstraint);\r\n\r\nexport const selectUnknownCells = extendSelector(\r\n  selectCells,\r\n  cells =>\r\n    cells.flatMap((column, x) =>\r\n      column\r\n        .map((cell, y) => [x, y, cell.stateKnown])\r\n        .filter(([_x, _y, known]) => !known)\r\n        .map(([x, y, _]) => [x, y])\r\n    ) as Coordinate[]\r\n);\r\n\r\nexport const selectCoords = selector(s => {\r\n  const coords: Coordinate[] = [];\r\n  for (let y = 0; y < s.cells[0].length; y++) {\r\n    for (let x = 0; x < s.cells.length; x++) {\r\n      coords.push([x, y]);\r\n    }\r\n  }\r\n  return coords;\r\n});\r\n","import { Coordinate } from \"./Cells\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ClearCellAction, FlagCellAction } from \"../board/Reducer\";\r\n\r\nexport type Constraint = {\r\n  coords: Coordinate[];\r\n  minMines: number;\r\n  maxMines: number;\r\n};\r\n\r\nexport function canClear(constraint: Constraint): boolean {\r\n  return constraint.maxMines <= 0;\r\n}\r\n\r\nexport function canFlag(constraint: Constraint): boolean {\r\n  return constraint.minMines >= constraint.coords.length;\r\n}\r\n\r\nexport function subtractConstraints(\r\n  c1: Constraint | null,\r\n  c2: Constraint | null\r\n): Constraint | null {\r\n  if (c1 === null || c2 === null) return null;\r\n\r\n  const [big, small] =\r\n    c1.coords.length > c2.coords.length ? [c1, c2] : [c2, c1];\r\n  if (big.coords.length <= small.coords.length) return null;\r\n  if (small.coords.some(coord => !inConstraint(big, ...coord))) {\r\n    return null;\r\n  }\r\n\r\n  const newCoords = big.coords.filter(([x, y]) => !inConstraint(small, x, y));\r\n  const minMines = big.minMines - small.maxMines;\r\n  const maxMines = big.maxMines - small.minMines;\r\n  const clampedMin = Math.min(Math.max(minMines, 0), newCoords.length);\r\n  const clampedMax = Math.min(Math.max(maxMines, 0), newCoords.length);\r\n  if (clampedMin === 0 && clampedMax === newCoords.length) return null;\r\n\r\n  return {\r\n    coords: newCoords,\r\n    minMines: clampedMin,\r\n    maxMines: clampedMax\r\n  };\r\n}\r\n\r\nexport function mergeConstraints(\r\n  c1: Constraint | null,\r\n  c2: Constraint | null\r\n): Constraint | null {\r\n  if (c1 === null || c2 === null) return null;\r\n  if (!constraintEquals(c1, c2)) return null;\r\n  if (c1.minMines <= c2.minMines && c1.maxMines >= c2.maxMines) return null;\r\n  if (c2.minMines <= c1.minMines && c2.maxMines >= c1.maxMines) return null;\r\n\r\n  return {\r\n    coords: c1.coords,\r\n    minMines: Math.max(c1.minMines, c2.minMines),\r\n    maxMines: Math.min(c1.maxMines, c2.maxMines)\r\n  };\r\n}\r\n\r\nexport function reduceConstraints(c1: Constraint | null, c2: Constraint | null): Constraint[] {\r\n  if (c1 === null || c2 !== null) return [];\r\n\r\n  const cellCount = c1.coords.length - 1;\r\n  const min = Math.min(Math.max(c1.minMines - 1, 0), cellCount);\r\n  const max = Math.min(c1.maxMines, cellCount);\r\n  if (min === 0 && max === cellCount) return [];\r\n\r\n  const output: Constraint[] = c1.coords\r\n    .map(([x1, y1]) => c1.coords.filter(([x2, y2]) => x1 !== x2 || y1 !== y2))\r\n    .map(coords => ({ coords: coords, minMines: min, maxMines: max }));\r\n  return output;\r\n}\r\n\r\nexport function inConstraint(\r\n  constraint: Constraint,\r\n  ...[x1, y1]: Coordinate\r\n): boolean {\r\n  return constraint.coords.some(([x2, y2]) => x1 === x2 && y1 === y2);\r\n}\r\n\r\nexport function constraintEquals(\r\n  c1: Constraint | null,\r\n  c2: Constraint | null\r\n): boolean {\r\n  if (c1 === null && c2 === null) return true;\r\n  if (c1 === null || c2 === null) return false;\r\n\r\n  const coords1 = c1.coords;\r\n  const coords2 = c2.coords;\r\n  return (\r\n    coords1.every(coord => inConstraint(c2, ...coord)) &&\r\n    coords2.every(coord => inConstraint(c1, ...coord))\r\n  );\r\n}\r\n\r\nfunction removeCoord(\r\n  coords: Coordinate[],\r\n  ...[x1, y1]: Coordinate\r\n): Coordinate[] {\r\n  return coords.filter(([x2, y2]) => x1 !== x2 || y1 !== y2);\r\n}\r\n\r\nexport function cellCleared(\r\n  constraint: Constraint,\r\n  ...[x, y]: Coordinate\r\n): Constraint | null {\r\n  if (!inConstraint(constraint, x, y)) return constraint;\r\n  if (constraint.coords.length === 1) return null;\r\n\r\n  const newCoords = removeCoord(constraint.coords, x, y);\r\n  const newMin = Math.min(newCoords.length, constraint.minMines);\r\n  const newMax = Math.min(newCoords.length, constraint.maxMines);\r\n  return {\r\n    coords: newCoords,\r\n    minMines: newMin,\r\n    maxMines: newMax\r\n  };\r\n}\r\n\r\nexport function cellFlagged(\r\n  constraint: Constraint,\r\n  ...[x, y]: Coordinate\r\n): Constraint | null {\r\n  if (!inConstraint(constraint, x, y)) return constraint;\r\n  if (constraint.coords.length === 1) return null;\r\n\r\n  const newCoords = removeCoord(constraint.coords, x, y);\r\n  const newMin = Math.max(0, constraint.minMines - 1);\r\n  const newMax = Math.max(0, constraint.maxMines - 1);\r\n  return {\r\n    coords: newCoords,\r\n    minMines: newMin,\r\n    maxMines: newMax\r\n  };\r\n}\r\n\r\nexport function cellRemoved(\r\n  constraint: Constraint,\r\n  ...[x, y]: Coordinate\r\n): Constraint | null {\r\n  if (!inConstraint(constraint, x, y)) return constraint;\r\n  if (constraint.coords.length === 1) return null;\r\n\r\n  const newCoords = removeCoord(constraint.coords, x, y);\r\n  const newMin = Math.min(\r\n    newCoords.length,\r\n    Math.max(constraint.minMines - 1, 0)\r\n  );\r\n  const newMax = Math.max(newCoords.length, constraint.maxMines);\r\n  return {\r\n    coords: newCoords,\r\n    minMines: newMin,\r\n    maxMines: newMax\r\n  };\r\n}\r\n\r\nexport function clearConstraint(\r\n  dispatch: Dispatch<ClearCellAction>,\r\n  constraint: Constraint\r\n) {\r\n  constraint.coords.forEach(coordinate =>\r\n    dispatch({ type: \"CLEAR_CELL\", coordinate })\r\n  );\r\n}\r\n\r\nexport function flagConstraint(\r\n  dispatch: Dispatch<FlagCellAction>,\r\n  constraint: Constraint\r\n) {\r\n  constraint.coords.forEach(coordinate =>\r\n    dispatch({ type: \"FLAG_CELL\", coordinate })\r\n  );\r\n}\r\n","import { CSSProperties } from \"react\";\r\n\r\nexport function gridStyle(width: number, height: number): CSSProperties {\r\n  return {\r\n    gridTemplateColumns: `repeat(${width}, 60px)`,\r\n    gridTemplateRows: `repeat(${height}, 60px)`\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { selectWidth, selectHeight, selectCoords } from \"../board/Reducer\";\r\nimport { useSelector, Selector } from \"../utils/Selector\";\r\nimport { Color } from \"csstype\";\r\nimport { Constraint, inConstraint, canClear, canFlag } from \"../utils/Constraint\";\r\nimport { gridStyle } from \"../utils/Styles\";\r\nimport { Coordinate } from \"../utils/Cells\";\r\n\r\nexport function targetColor(constraints: Constraint[], coordinate: Coordinate): Color {\r\n  if (constraints.some(c => canClear(c) && inConstraint(c, ...coordinate)))\r\n    return \"#0f05\";\r\n\r\n  if (constraints.some(c => canFlag(c) && inConstraint(c, ...coordinate)))\r\n    return \"#f005\";\r\n\r\n  if (constraints.some(c => inConstraint(c, ...coordinate))) return \"#0003\";\r\n  else return \"transparent\";\r\n}\r\n\r\nexport function firstColor(constraints: Constraint[], coordinate: Coordinate): Color {\r\n  if (constraints.some(c => inConstraint(c, ...coordinate))) return \"#f905\";\r\n  else return \"transparent\";\r\n}\r\n\r\nexport function secondColor(constraints: Constraint[], coordinate: Coordinate): Color {\r\n  if (constraints.some(c => inConstraint(c, ...coordinate))) return \"#09f5\";\r\n  else return \"transparent\";\r\n}\r\n\r\ntype Props = {\r\n  selectConstraints: Selector<Constraint[]>;\r\n  colorSelector: (constraints: Constraint[], coordinate: Coordinate) => Color;\r\n};\r\n\r\nconst Component: React.FC<Props> = ({\r\n  selectConstraints,\r\n  colorSelector\r\n}: Props) => {\r\n  const constraints = useSelector(selectConstraints);\r\n  const width = useSelector(selectWidth);\r\n  const height = useSelector(selectHeight);\r\n  const coords = useSelector(selectCoords);\r\n  if (constraints.length === 0) return null;\r\n\r\n  return (\r\n    <div className=\"overlayContainer\" style={gridStyle(width, height)}>\r\n      {coords.map(([x, y]) => (\r\n        <div\r\n          key={`${x},${y}`}\r\n          style={{ background: colorSelector(constraints, [x, y]) }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import { Dispatch, Action } from \"redux\";\r\nimport { useDispatch as reduxUseDispatch } from \"react-redux\";\r\n\r\nexport type ExtractType<A extends Action<string>> = A extends Action<infer TYPE>\r\n  ? TYPE\r\n  : never;\r\n\r\nexport function useDispatch<Actions extends Action>(): Dispatch<Actions> {\r\n  return reduxUseDispatch<Dispatch<Actions>>();\r\n}\r\n","import { ReducerBuilder } from \"../utils/Reducer\";\r\nimport { Action } from \"@reduxjs/toolkit\";\r\nimport { sliceSelector, selectorCreator } from \"../utils/Selector\";\r\nimport { LoadBoardAction } from \"../board/Reducer\";\r\n\r\nexport type State = {\r\n  cheatMode: boolean;\r\n  autoZero: boolean;\r\n  autoClear: boolean;\r\n  autoFlag: boolean;\r\n  showRemaining: boolean;\r\n  showCoords: boolean;\r\n  showSubtraction: boolean;\r\n  showReduce: boolean;\r\n  showMerge: boolean;\r\n  showBoardConstraint: boolean;\r\n  showOptions: boolean;\r\n  resolveComplex: boolean;\r\n};\r\n\r\nconst INITIAL_STATE: State = {\r\n  showRemaining: false,\r\n  cheatMode: false,\r\n  autoZero: true,\r\n  autoClear: false,\r\n  autoFlag: false,\r\n  showCoords: false,\r\n  showSubtraction: false,\r\n  showReduce: false,\r\n  showMerge: false,\r\n  showBoardConstraint: false,\r\n  showOptions: false,\r\n  resolveComplex: false\r\n};\r\n\r\n// Reducer\r\nexport const reducer = ReducerBuilder.create(INITIAL_STATE)\r\n  .addCase(\"SET_OPTION\", (state, { option, value }: SetOptionAction) => {\r\n    state[option] = value;\r\n  })\r\n  .addCase(\"LOAD_BOARD\", (state, {options}: LoadBoardAction) => {\r\n    Object.assign(state, options)\r\n  })\r\n  .build();\r\n\r\n// Actions\r\nexport type SetOptionAction = Action<\"SET_OPTION\"> & {\r\n  option: keyof State;\r\n  value: boolean;\r\n};\r\n\r\n// Selectors\r\nexport const selectSlice = sliceSelector(\"options\");\r\nexport const selector = selectorCreator(selectSlice);\r\nexport const selectCheatMode = selector(s => s.cheatMode);\r\nexport const selectAutoZero = selector(s => s.autoZero);\r\nexport const selectAutoClear = selector(s => s.autoClear);\r\nexport const selectAutoFlag = selector(s => s.autoFlag);\r\nexport const selectShowRemaining = selector(s => s.showRemaining);\r\nexport const selectShowCoords = selector(s => s.showCoords);\r\nexport const selectShowSubtraction = selector(s => s.showSubtraction);\r\nexport const selectShowReduce = selector(s => s.showReduce);\r\nexport const selectShowMerge = selector(s => s.showMerge);\r\nexport const selectShowComplexConstraints = selector(s => s.showSubtraction || s.showReduce || s.showMerge);\r\nexport const selectShowBoardConstraint = selector(s => s.showBoardConstraint);\r\nexport const selectShowOptions = selector(s => s.showOptions);\r\nexport const selectResolveComplex = selector(s => s.resolveComplex);","import { useArgSelector, useSelector } from \"../utils/Selector\";\r\nimport {\r\n  selectCellState,\r\n  selectCellStateKnown,\r\n  selectConstraint,\r\n  ClearCellAction,\r\n  FlagCellAction\r\n} from \"./Reducer\";\r\nimport { Coordinate } from \"../utils/Cells\";\r\nimport React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport {\r\n  canClear,\r\n  canFlag,\r\n  Constraint\r\n} from \"../utils/Constraint\";\r\nimport {\r\n  selectCheatMode,\r\n  selectAutoZero,\r\n  selectAutoClear,\r\n  selectAutoFlag,\r\n  selectShowRemaining\r\n} from \"../options/Reducer\";\r\nimport {\r\n  SelectConstraintAction,\r\n  SetTargetConstraintsAction\r\n} from \"../constraints/Actions\";\r\n\r\ntype Props = {\r\n  coordinate: Coordinate;\r\n};\r\n\r\nconst Component: React.FC<Props> = props => {\r\n  const state = useArgSelector(selectCellState, props);\r\n  const stateKnown = useArgSelector(selectCellStateKnown, props);\r\n  const constraint = useArgSelector(selectConstraint, props);\r\n\r\n  const dispatch = useDispatch<\r\n    | SetTargetConstraintsAction\r\n    | SelectConstraintAction\r\n    | ClearCellAction\r\n    | FlagCellAction\r\n  >();\r\n\r\n  let className = \"cell\";\r\n  if (constraint !== null) className += \" clickable\";\r\n\r\n  const cheatMode = useSelector(selectCheatMode);\r\n  if (cheatMode && constraint !== null) {\r\n    if (canClear(constraint)) {\r\n      className += \" clearable\";\r\n    } else if (canFlag(constraint)) {\r\n      className += \" flaggable\";\r\n    }\r\n  }\r\n\r\n  function clearConstraint(constraint: Constraint) {\r\n    constraint.coords.forEach(coordinate =>\r\n      dispatch({ type: \"CLEAR_CELL\", coordinate })\r\n    );\r\n  }\r\n\r\n  function flagConstraint(constraint: Constraint) {\r\n    constraint.coords.forEach(coordinate =>\r\n      dispatch({ type: \"FLAG_CELL\", coordinate })\r\n    );\r\n  }\r\n\r\n  const onClick = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (constraint === null) return;\r\n    if (canClear(constraint)) return clearConstraint(constraint);\r\n    if (canFlag(constraint)) return flagConstraint(constraint);\r\n    return dispatch({ type: \"SELECT_CONSTRAINT\", constraint });\r\n  };\r\n\r\n  const autoZero = useSelector(selectAutoZero);\r\n  const autoClear = useSelector(selectAutoClear);\r\n  const autoFlag = useSelector(selectAutoFlag);\r\n  if (stateKnown && constraint !== null) {\r\n    if (autoZero && state === 0) clearConstraint(constraint);\r\n    if (autoClear && canClear(constraint))\r\n      clearConstraint(constraint);\r\n    if (autoFlag && canFlag(constraint)) flagConstraint(constraint);\r\n  }\r\n\r\n  let text = \"\";\r\n  const showRemaining = useSelector(selectShowRemaining);\r\n  if (stateKnown) {\r\n    if (showRemaining && state !== \"X\") {\r\n      const mines = constraint === null ? 0 : constraint.maxMines;\r\n      text = mines.toString();\r\n    } else {\r\n      text = state.toString();\r\n    }\r\n    className += ` state${text}`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      onPointerEnter={\r\n        constraint === null\r\n          ? undefined\r\n          : () => dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints: [constraint] })\r\n      }\r\n      onPointerLeave={\r\n        constraint === null\r\n          ? undefined\r\n          : () => dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints: [] })\r\n      }\r\n      onClick={onClick}\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { selectWidth, selectHeight, selectCoords } from \"./Reducer\";\r\nimport { useSelector } from \"../utils/Selector\";\r\nimport Cell from \"./Cell\";\r\nimport { gridStyle } from \"../utils/Styles\";\r\n\r\nconst Component: React.FC = () => {\r\n  const width = useSelector(selectWidth);\r\n  const height = useSelector(selectHeight);\r\n  const coords = useSelector(selectCoords);\r\n\r\n  return (\r\n    <div\r\n      className=\"boardContainer\"\r\n      style={gridStyle(width, height)}\r\n    >\r\n      {coords.map(([x,y]) => <Cell key={`${x},${y}`} coordinate={[x, y]} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { useSelector } from \"../utils/Selector\";\r\nimport { selectShowCoords } from \"../options/Reducer\";\r\n\r\ntype Props = {\r\n  index: number;\r\n};\r\n\r\nconst Component: React.FC<Props> = ({ index }) => {\r\n  const enabled = useSelector(selectShowCoords);\r\n\r\n  let className = \"cell\";\r\n  if (enabled) {\r\n    className += \" enabled\";\r\n  }\r\n  return <div className={className}>{index}</div>;\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { selectWidth, selectHeight, selectCoords } from \"../board/Reducer\";\r\nimport { useSelector } from \"../utils/Selector\";\r\nimport CoordsSquare from \"./CoordsSquare\";\r\nimport { gridStyle } from \"../utils/Styles\";\r\n\r\n\r\nconst Component: React.FC = () => {\r\n  const width = useSelector(selectWidth);\r\n  const height = useSelector(selectHeight);\r\n  const coords = useSelector(selectCoords);\r\n\r\n  return (\r\n    <div className=\"coordsContainer\" style={gridStyle(width, height)}>\r\n      {coords.map(([x,y], idx) => (\r\n        <CoordsSquare key={`${x},${y}`} index={idx} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { Selector, useSelector } from \"../utils/Selector\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport { SetOptionAction, State } from \"./Reducer\";\r\nimport \"./Styles.scss\";\r\ntype Props = {\r\n  selector: Selector<boolean>;\r\n  text: string;\r\n  option: keyof State;\r\n};\r\n\r\nconst Component: React.FC<Props> = ({ selector, text, option }) => {\r\n  const enabled = useSelector(selector);\r\n  const dispatch = useDispatch<SetOptionAction>();\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        {text}:\r\n        <input\r\n          name=\"showRemaining\"\r\n          type=\"checkbox\"\r\n          checked={enabled}\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"SET_OPTION\",\r\n              option,\r\n              value: e.target.checked\r\n            })\r\n          }\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport {\r\n  selectCheatMode,\r\n  selectAutoZero,\r\n  selectAutoClear,\r\n  selectAutoFlag,\r\n  selectShowRemaining,\r\n  selectShowSubtraction,\r\n  selectShowReduce,\r\n  selectShowMerge,\r\n  selectShowBoardConstraint,\r\n  selectResolveComplex\r\n} from \"./Reducer\";\r\nimport OptionCheckbox from \"./OptionCheckbox\";\r\nimport \"./Styles.scss\";\r\nconst Component: React.FC = () => {\r\n  return (\r\n    <div className=\"panel\">\r\n      <div className=\"header\">Options:</div>\r\n      <OptionCheckbox\r\n        selector={selectShowRemaining}\r\n        option=\"showRemaining\"\r\n        text=\"Show Remaining\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectCheatMode}\r\n        option=\"cheatMode\"\r\n        text=\"Cheat Mode\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectAutoZero}\r\n        option=\"autoZero\"\r\n        text=\"Auto Zero\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectAutoClear}\r\n        option=\"autoClear\"\r\n        text=\"Auto Clear\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectAutoFlag}\r\n        option=\"autoFlag\"\r\n        text=\"Auto Flag\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectResolveComplex}\r\n        option=\"resolveComplex\"\r\n        text=\"Resolve Complex\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectShowSubtraction}\r\n        option=\"showSubtraction\"\r\n        text=\"Show Subtraction\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectShowReduce}\r\n        option=\"showReduce\"\r\n        text=\"Show Reduce\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectShowMerge}\r\n        option=\"showMerge\"\r\n        text=\"Show Merge\"\r\n      />\r\n      <OptionCheckbox\r\n        selector={selectShowBoardConstraint}\r\n        option=\"showBoardConstraint\"\r\n        text=\"Show Board Constraint\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport { LoadBoardAction } from \"../board/Reducer\";\r\nimport \"./Styles.scss\";\r\nimport { Save } from \"./LoadPanel\";\r\n\r\ntype Props = {\r\n  name: string;\r\n  save: Save\r\n};\r\n\r\nconst Component: React.FC<Props> = ({ name, save }) => {\r\n  const dispatch = useDispatch<LoadBoardAction>();\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => dispatch({ type: \"LOAD_BOARD\", ...save })}>\r\n        {name}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import { Coordinate } from \"../utils/Cells\";\r\nimport React from \"react\";\r\nimport LoadButton from \"./LoadButton\";\r\nimport \"./Styles.scss\";\r\nimport { Matrix } from \"../utils/Lists\";\r\nimport { State as OptionState } from \"./Reducer\";\r\nexport type Save = {\r\n  mines: Matrix<0 | 1>;\r\n  start: Coordinate;\r\n  options: Partial<OptionState>;\r\n};\r\n\r\nconst real: Save = {\r\n  mines: [\r\n    [0, 0, 0, 1, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 0, 0, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 0],\r\n    [0, 0, 0, 0, 1, 1, 0],\r\n    [0, 1, 0, 1, 0, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 1],\r\n    [0, 0, 0, 1, 1, 0, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [0, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: false,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: false,\r\n    showReduce: false,\r\n    showMerge: false,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst basicTraining: Save = {\r\n  mines: [\r\n    [0, 0, 0, 0, 0],\r\n    [0, 0, 1, 0, 0],\r\n    [0, 0, 1, 1, 1],\r\n    [0, 0, 1, 0, 0],\r\n    [0, 0, 0, 0, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [0, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: false,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: false,\r\n    showReduce: false,\r\n    showMerge: false,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst subtractionTraining1: Save = {\r\n  mines: [\r\n    [0, 0, 1],\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 1]\r\n  ] as Matrix<0 | 1>,\r\n  start: [0, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: false,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: true,\r\n    showReduce: false,\r\n    showMerge: false,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst subtractionTraining2: Save = {\r\n  mines: [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 1, 0, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [3, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: true,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: true,\r\n    showReduce: false,\r\n    showMerge: false,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst reduceTraining1: Save = {\r\n  mines: [\r\n    [0, 1, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 1, 0, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [2, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: true,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: true,\r\n    showReduce: true,\r\n    showMerge: true,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst reduceTraining2: Save = {\r\n  mines: [\r\n    [0, 0, 1, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 1],\r\n    [0, 0, 0, 0, 0, 0],\r\n    [0, 0, 1, 1, 0, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [3, 3] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: true,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: true,\r\n    showReduce: true,\r\n    showMerge: true,\r\n    showBoardConstraint: false\r\n  }\r\n};\r\n\r\nconst wholeBoardTraining: Save = {\r\n  mines: [\r\n    [0, 1, 1, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 1],\r\n    [0, 0, 0, 1],\r\n    [0, 0, 0, 0],\r\n    [0, 1, 1, 0]\r\n  ] as Matrix<0 | 1>,\r\n  start: [2, 0] as Coordinate,\r\n  options: {\r\n    showRemaining: false,\r\n    cheatMode: true,\r\n    autoZero: true,\r\n    autoClear: false,\r\n    autoFlag: false,\r\n    resolveComplex: true,\r\n    showSubtraction: true,\r\n    showReduce: true,\r\n    showMerge: true,\r\n    showBoardConstraint: true\r\n  }\r\n};\r\n\r\nconst Component: React.FC = () => {\r\n  return (\r\n    <div className=\"panel\">\r\n      <div className=\"header\">Load:</div>\r\n      <LoadButton name=\"Real\" save={real} />\r\n      <LoadButton name=\"Basic Training\" save={basicTraining} />\r\n      <LoadButton name=\"Subtraction Training 1\" save={subtractionTraining1} />\r\n      <LoadButton name=\"Subtraction Training 2\" save={subtractionTraining2} />\r\n      <LoadButton name=\"Reduction Training 1\" save={reduceTraining1} />\r\n      <LoadButton name=\"Reduction Training 2\" save={reduceTraining2} />\r\n      <LoadButton name=\"Whole Board Training\" save={wholeBoardTraining} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport { useSelector } from \"../utils/Selector\";\r\nimport { selectHeight, selectWidth, selectMineCount } from \"../board/Reducer\";\r\nimport \"./Styles.scss\";\r\n\r\nconst Component: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const height = useSelector(selectHeight);\r\n  const width = useSelector(selectWidth);\r\n  const mines = useSelector(selectMineCount);\r\n\r\n  return (\r\n    <div className=\"panel\">\r\n      <div className=\"header\">Generate:</div>\r\n      <div>\r\n        <label>\r\n          Width:\r\n          <input\r\n            name=\"width\"\r\n            type=\"text\"\r\n            value={width}\r\n            onChange={e => {\r\n              const width = Number.parseInt(e.target.value);\r\n              if (width != null) {\r\n                dispatch({\r\n                  type: \"REGENERATE_BOARD\",\r\n                  width,\r\n                  height,\r\n                  mines\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Height:\r\n          <input\r\n            name=\"height\"\r\n            type=\"text\"\r\n            value={height}\r\n            onChange={e => {\r\n              const height = Number.parseInt(e.target.value);\r\n              if (height != null) {\r\n                dispatch({\r\n                  type: \"REGENERATE_BOARD\",\r\n                  width,\r\n                  height,\r\n                  mines\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Mines:\r\n          <input\r\n            name=\"mines\"\r\n            type=\"text\"\r\n            value={mines}\r\n            onChange={e => {\r\n              const mines = Number.parseInt(e.target.value);\r\n              if (mines != null) {\r\n                dispatch({\r\n                  type: \"REGENERATE_BOARD\",\r\n                  width,\r\n                  height,\r\n                  mines\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() =>\r\n            dispatch({ type: \"REGENERATE_BOARD\", width, height, mines })\r\n          }\r\n        >\r\n          Regenerate\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport OptionsPanel from \"./OptionsPanel\";\r\nimport LoadPanel from \"./LoadPanel\";\r\nimport GeneratePanel from \"./GeneratePanel\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport { SetOptionAction, selectShowOptions } from \"./Reducer\";\r\nimport { useSelector } from \"../utils/Selector\";\r\n\r\nconst Component: React.FC = () => {\r\n  const dispatch = useDispatch<SetOptionAction>();\r\n  const show = useSelector(selectShowOptions);\r\n  return (\r\n    <div\r\n      className=\"optionsWrapper\"\r\n      onMouseEnter={() =>\r\n        dispatch({ type: \"SET_OPTION\", option: \"showOptions\", value: true })\r\n      }\r\n      onMouseLeave={() =>\r\n        dispatch({ type: \"SET_OPTION\", option: \"showOptions\", value: false })\r\n      }\r\n    >\r\n      <div hidden={!show} className=\"allOptions\">\r\n        <OptionsPanel />\r\n        <LoadPanel />\r\n        <GeneratePanel />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"../utils/Actions\";\r\nimport { SetOptionAction } from \"../options/Reducer\";\r\nimport { selectHasWon } from \"../board/Reducer\";\r\nimport { useSelector } from \"../utils/Selector\";\r\n\r\nconst Component: React.FC = () => {\r\n  const dispatch = useDispatch<SetOptionAction>();\r\n  const won: boolean = useSelector(selectHasWon);\r\n  const onMouseEnter = () => {\r\n    dispatch({ type: \"SET_OPTION\", option: \"showCoords\", value: true });\r\n  };\r\n  const onMouseLeave = () => {\r\n    dispatch({ type: \"SET_OPTION\", option: \"showCoords\", value: false });\r\n  };\r\n  if (won) {\r\n    return <h1>Success!</h1>;\r\n  } else {\r\n    return <h1 onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n      Minesweeper\r\n    </h1>;\r\n  }\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { useSelector, Selector } from \"../../utils/Selector\";\r\nimport { Constraint } from \"../../utils/Constraint\";\r\nimport \"./Styles.scss\";\r\nimport { Color } from \"csstype\";\r\n\r\nexport type Props = {\r\n  constraintName: string;\r\n  constraintsSelector: Selector<Array<Constraint | null>>;\r\n  colorSelector: (constraints: Constraint[]) => Color;\r\n};\r\n\r\nfunction getConstraintComplex(constraint: Constraint) {\r\n  const { coords, minMines, maxMines } = constraint;\r\n  const cellCount = coords.length;\r\n\r\n  const cellsString = `Cell${cellCount > 1 ? \"s\" : \"\"}`;\r\n  const exact = minMines === maxMines;\r\n  const minesCount = `${minMines} ${exact ? \"\" : `to ${maxMines}`}`;\r\n  const minesString = maxMines === 1 ? \"Mine\" : \"Mines\";\r\n  return (\r\n    <div className=\"constraintInfo\">\r\n      <div>{`${cellCount} ${cellsString}`}</div>\r\n      <div>{`${minesCount} ${minesString}`}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getConstraintInfo(constraints: Constraint[]) {\r\n  if (constraints.length === 0) {\r\n    return <div className=\"constraintEmpty\">Nothing selected</div>;\r\n  }\r\n  return getConstraintComplex(constraints[0]);\r\n}\r\n\r\nconst Component: React.FC<Props> = ({\r\n  constraintName,\r\n  constraintsSelector,\r\n  colorSelector\r\n}: Props) => {\r\n  const constraints = useSelector(constraintsSelector).filter(\r\n    c => c !== null\r\n  ) as Constraint[];\r\n\r\n  return (\r\n    <div\r\n      className=\"constraint\"\r\n      style={{ background: colorSelector(constraints) }}\r\n    >\r\n      <div className=\"constraintName\">{constraintName}</div>\r\n      {getConstraintInfo(constraints)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import { sliceSelector, selectorCreator } from \"../utils/Selector\";\r\nimport { subtractConstraints, mergeConstraints, reduceConstraints } from \"../utils/Constraint\";\r\n\r\nexport const selectSlice = sliceSelector(\"constraints\");\r\nexport const selector = selectorCreator(selectSlice);\r\nexport const selectFirst = selector(s => s.first);\r\nexport const selectFirstWrapped = selector(s => s.first === null ? [] : [s.first]);\r\nexport const selectSecond = selector(s => s.second);\r\nexport const selectSecondWrapped = selector(s => s.second === null ? [] : [s.second]);\r\nexport const selectTargets = selector(s => s.targets);\r\nexport const selectAnySelected = selector(\r\n  s => s.first !== null || s.second !== null\r\n);\r\nexport const selectSubtract = selector(\r\n  s => subtractConstraints(s.first, s.second)\r\n);\r\nexport const selectMerge = selector(\r\n  s => mergeConstraints(s.first, s.second)\r\n);\r\nexport const selectReduce = selector(\r\n  s => reduceConstraints(s.first, s.second)\r\n);\r\nexport const selectComplexConstraints = selector(s => s.complexConstraints);\r\n","import ConstraintInfo from \"./ConstraintInfo\";\r\nimport \"./Styles.scss\";\r\nimport React from \"react\";\r\nimport {\r\n  selectTargets,\r\n  selectSecondWrapped,\r\n  selectFirstWrapped\r\n} from \"../Selectors\";\r\nimport { Constraint, canClear, canFlag } from \"../../utils/Constraint\";\r\nimport { Color } from \"csstype\";\r\n\r\nfunction targetColor(constraints: Constraint[]): Color {\r\n  if (constraints.some(c => canClear(c))) return \"#0f05\";\r\n\r\n  if (constraints.some(c => canFlag(c))) return \"#f005\";\r\n\r\n  return \"#ddd\";\r\n}\r\n\r\nfunction firstColor(constraints: Constraint[]): Color {\r\n  if (constraints.length === 0) return \"#ddd\";\r\n  else return \"#fc9\";\r\n}\r\n\r\nfunction secondColor(constraints: Constraint[]): Color {\r\n  if (constraints.length === 0) return \"#ddd\";\r\n  else return \"#9cf\";\r\n}\r\n\r\nconst Component: React.FC = () => {\r\n  return (\r\n    <div className=\"selectedConstraints\">\r\n      <ConstraintInfo\r\n        constraintName=\"Constraint 1\"\r\n        constraintsSelector={selectFirstWrapped}\r\n        colorSelector={firstColor}\r\n      />\r\n      <ConstraintInfo\r\n        constraintName=\"Constraint 2\"\r\n        constraintsSelector={selectSecondWrapped}\r\n        colorSelector={secondColor}\r\n      />\r\n      <ConstraintInfo\r\n        constraintName=\"Targets\"\r\n        constraintsSelector={selectTargets}\r\n        colorSelector={targetColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport \"./Styles.scss\";\r\nimport { Constraint, canClear, canFlag, clearConstraint, flagConstraint } from \"../../utils/Constraint\";\r\nimport { useDispatch } from \"../../utils/Actions\";\r\nimport {\r\n  AddConstraintsAction,\r\n  SetTargetConstraintsAction,\r\n  ClearSelectedConstraintsAction\r\n} from \"../Actions\";\r\nimport { useSelector } from \"../../utils/Selector\";\r\nimport { ClearCellAction, FlagCellAction } from \"../../board/Reducer\";\r\nimport { selectResolveComplex } from \"../../options/Reducer\";\r\n\r\ntype Props = {\r\n  constraints: Array<Constraint>;\r\n  text: string;\r\n};\r\n\r\nconst Component: React.FC<Props> = ({ text, constraints }) => {\r\n  const dispatch = useDispatch<\r\n    | AddConstraintsAction\r\n    | SetTargetConstraintsAction\r\n    | ClearSelectedConstraintsAction\r\n    | ClearCellAction\r\n    | FlagCellAction\r\n  >();\r\n  const resolveComplex = useSelector(selectResolveComplex);\r\n\r\n  const addConstraints = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (constraints.length === 0) return;\r\n    dispatch({ type: \"CLEAR_SELECTED_CONSTRAINTS\" });\r\n    if (resolveComplex) {\r\n      const clearable = constraints.filter(c => canClear(c));\r\n      clearable.forEach(c => clearConstraint(dispatch, c));\r\n\r\n      const flaggable = constraints.filter(c => canFlag(c));\r\n      flaggable.forEach(c => flagConstraint(dispatch, c));\r\n\r\n      const nonSolvable = constraints.filter(c => !canClear(c) && !canFlag(c));\r\n      dispatch({ type: \"ADD_CONSTRAINTS\", constraints: nonSolvable });\r\n    } else {\r\n      dispatch({ type: \"ADD_CONSTRAINTS\", constraints });\r\n    }\r\n  };\r\n  const setTargetConstraints = () => {\r\n    if (constraints.length === 0) return;\r\n    dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints });\r\n  };\r\n  const clearTargetConstraints = () => {\r\n    if (constraints.length === 0) return;\r\n    dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints: [] });\r\n  };\r\n\r\n  let className = \"constraintButton\";\r\n  if (constraints.length !== 0) {\r\n    className += \" enabled\";\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={addConstraints}\r\n      onMouseEnter={setTargetConstraints}\r\n      onMouseLeave={clearTargetConstraints}\r\n      className={className}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import { useSelector } from \"../../utils/Selector\";\r\nimport \"./Styles.scss\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"../../utils/Actions\";\r\nimport ConstraintButton from \"./ActionButton\";\r\nimport { selectAnySelected, selectSubtract, selectReduce, selectMerge } from \"../Selectors\";\r\nimport { ClearSelectedConstraintsAction, SetTargetConstraintsAction, AddConstraintsAction } from \"../Actions\";\r\nimport { selectShowSubtraction, selectShowReduce, selectShowMerge } from \"../../options/Reducer\";\r\nimport { Constraint } from \"../../utils/Constraint\";\r\n\r\nconst Component: React.FC = () => {\r\n  const canDeselect = useSelector(selectAnySelected);\r\n\r\n  const dispatch = useDispatch<\r\n    | ClearSelectedConstraintsAction\r\n    | SetTargetConstraintsAction\r\n    | AddConstraintsAction\r\n  >();\r\n\r\n  const deselect = () => {\r\n    if(!canDeselect) return;\r\n    dispatch({ type: \"CLEAR_SELECTED_CONSTRAINTS\" });\r\n  }\r\n\r\n  const subtractProduces = useSelector(selectSubtract);\r\n  const reduceProduces = useSelector(selectReduce);\r\n  const mergeProduces = useSelector(selectMerge);\r\n\r\n  const showSubtraction = useSelector(selectShowSubtraction);\r\n  const showReduce = useSelector(selectShowReduce);\r\n  const showMerge = useSelector(selectShowMerge);\r\n\r\n  const subtracted = subtractProduces === null ? [] : [subtractProduces];\r\n  const reduced = reduceProduces.filter(c => c !== null) as Constraint[];\r\n  const merged = mergeProduces === null ? [] : [mergeProduces];\r\n\r\n  return (\r\n    <div className=\"constraintActions\">\r\n      <button onClick={deselect} className={`constraintButton${canDeselect ? \" enabled\" : \"\"}`}>Deselect</button>\r\n      {showSubtraction ? (<ConstraintButton constraints={subtracted} text=\"Subtract\" />) : null}\r\n      {showReduce ? (<ConstraintButton constraints={reduced} text=\"Reduce\" />) : null }\r\n      {showMerge ? (<ConstraintButton constraints={merged} text=\"Merge\" />) : null }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport {\r\n  Constraint,\r\n  canClear,\r\n  canFlag,\r\n  clearConstraint,\r\n  flagConstraint\r\n} from \"../../utils/Constraint\";\r\nimport { useDispatch } from \"../../utils/Actions\";\r\nimport { ClearCellAction, FlagCellAction } from \"../../board/Reducer\";\r\nimport \"./Styles.scss\";\r\nimport { useSelector } from \"../../utils/Selector\";\r\nimport {\r\n  selectAutoClear,\r\n  selectAutoFlag,\r\n  selectCheatMode\r\n} from \"../../options/Reducer\";\r\nimport {\r\n  SelectConstraintAction,\r\n  DeleteConstraintAction,\r\n  SetTargetConstraintsAction\r\n} from \"../Actions\";\r\n\r\nexport type Props = {\r\n  constraint: Constraint;\r\n  index?: number | null;\r\n};\r\n\r\nconst Component: React.FC<Props> = ({ constraint, index = null }: Props) => {\r\n  const { coords, minMines, maxMines } = constraint;\r\n  const cellCount = coords.length;\r\n  const dispatch = useDispatch<\r\n    | SetTargetConstraintsAction\r\n    | SelectConstraintAction\r\n    | ClearCellAction\r\n    | FlagCellAction\r\n    | DeleteConstraintAction\r\n  >();\r\n\r\n  const clearable = canClear(constraint);\r\n  const flaggable = canFlag(constraint);\r\n\r\n  const onClick = () => {\r\n    if (constraint === null) return;\r\n    if (clearable) return clearConstraint(dispatch, constraint);\r\n    if (flaggable) return flagConstraint(dispatch, constraint);\r\n    return dispatch({ type: \"SELECT_CONSTRAINT\", constraint });\r\n  };\r\n\r\n  const onContextMenu = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (index !== null) {\r\n      dispatch({ type: \"DELETE_CONSTRAINT\", index });\r\n    }\r\n  };\r\n\r\n  const autoClear = useSelector(selectAutoClear);\r\n  if (autoClear && clearable) clearConstraint(dispatch, constraint);\r\n\r\n  const autoFlag = useSelector(selectAutoFlag);\r\n  if (autoFlag && flaggable) flagConstraint(dispatch, constraint);\r\n\r\n  let className = \"constraint\";\r\n\r\n  const cheatMode = useSelector(selectCheatMode);\r\n  if (cheatMode) {\r\n    if (clearable) {\r\n      className += \" clearable\";\r\n    } else if (flaggable) {\r\n      className += \" flaggable\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      onContextMenu={onContextMenu}\r\n      onMouseEnter={() =>\r\n        dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints: [constraint] })\r\n      }\r\n      onMouseLeave={() =>\r\n        dispatch({ type: \"SET_TARGET_CONSTRAINTS\", constraints: [] })\r\n      }\r\n      className={className}\r\n    >\r\n      <div>Cells: {cellCount}</div>\r\n      <div>\r\n        Mines: {minMines} - {maxMines}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from \"react\";\r\nimport { useSelector } from \"../../utils/Selector\";\r\nimport ComplexConstraint from \"./ComplexConstraint\";\r\nimport \"./Styles.scss\";\r\nimport {\r\n  selectUnknownCells,\r\n  selectRemainingMineCount\r\n} from \"../../board/Reducer\";\r\nimport { selectComplexConstraints } from \"../Selectors\";\r\nimport {\r\n  selectShowBoardConstraint,\r\n  selectShowComplexConstraints\r\n} from \"../../options/Reducer\";\r\n\r\nconst Component: React.FC = () => {\r\n  const constraints = useSelector(selectComplexConstraints);\r\n\r\n  const unknownCells = useSelector(selectUnknownCells);\r\n  const mineCount = useSelector(selectRemainingMineCount);\r\n  const wholeBoardConstraint = {\r\n    coords: unknownCells,\r\n    minMines: mineCount,\r\n    maxMines: mineCount\r\n  };\r\n\r\n  const showBoardConstraint = useSelector(selectShowBoardConstraint);\r\n  const showAnything = useSelector(selectShowComplexConstraints);\r\n  if (!showAnything) return null;\r\n\r\n  return (\r\n    <div className=\"constraintList\">\r\n      <div className=\"listHeader\">Complex Constraints:</div>\r\n      <div className=\"listBody\">\r\n        {showBoardConstraint && wholeBoardConstraint.maxMines > 0 ? (\r\n          <ComplexConstraint constraint={wholeBoardConstraint} />\r\n        ) : null}\r\n        {constraints.map((constraint, idx) => (\r\n          <ComplexConstraint\r\n            key={JSON.stringify(constraint)}\r\n            constraint={constraint}\r\n            index={idx}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import { ReducerBuilder } from \"../utils/Reducer\";\r\nimport {\r\n  Constraint,\r\n  cellFlagged,\r\n  cellCleared\r\n} from \"../utils/Constraint\";\r\nimport {\r\n  ClearCellAction,\r\n  FlagCellAction,\r\n  RegenerateBoardAction,\r\n  LoadBoardAction\r\n} from \"../board/Reducer\";\r\nimport {\r\n  SelectConstraintAction,\r\n  SetTargetConstraintsAction,\r\n  ClearSelectedConstraintsAction,\r\n  DeleteConstraintAction,\r\n  AddConstraintsAction\r\n} from \"./Actions\";\r\n\r\ntype State = {\r\n  first: Constraint | null;\r\n  second: Constraint | null;\r\n  targets: Array<Constraint>;\r\n\r\n  complexConstraints: Array<Constraint>;\r\n};\r\n\r\nconst INITIAL_STATE: State = {\r\n  first: null,\r\n  second: null,\r\n  targets: [],\r\n\r\n  complexConstraints: []\r\n};\r\n\r\nfunction resetSelected(state: State){\r\n  state.first = null;\r\n  state.second = null;\r\n  state.targets = [];\r\n}\r\n\r\n// Reducer\r\nexport const reducer = ReducerBuilder.create(INITIAL_STATE)\r\n         .addCase(\r\n           \"SELECT_CONSTRAINT\",\r\n           (state, { constraint }: SelectConstraintAction) => {\r\n             if (state.first === constraint) return;\r\n             if (state.second === constraint) return;\r\n\r\n             state.targets = [];\r\n\r\n             if (state.first === null) {\r\n               state.first = constraint;\r\n             } else {\r\n               state.second = constraint;\r\n             }\r\n           }\r\n         )\r\n         .addCase(\r\n           \"SET_TARGET_CONSTRAINTS\",\r\n           (state, { constraints }: SetTargetConstraintsAction) => {\r\n             state.targets = constraints.filter(c => c !== null) as Constraint[];\r\n           }\r\n         )\r\n         .addCase(\r\n           \"CLEAR_SELECTED_CONSTRAINTS\",\r\n           (state, _: ClearSelectedConstraintsAction) => {\r\n             resetSelected(state);\r\n           }\r\n         )\r\n         .addCase(\"CLEAR_CELL\", (state, { coordinate }: ClearCellAction) => {\r\n           resetSelected(state);\r\n           state.complexConstraints = state.complexConstraints\r\n             .map(constraint => cellCleared(constraint, ...coordinate))\r\n             .filter(constraint => constraint !== null) as Constraint[];\r\n         })\r\n         .addCase(\"FLAG_CELL\", (state, { coordinate }: FlagCellAction) => {\r\n           resetSelected(state);\r\n           state.complexConstraints = state.complexConstraints\r\n             .map(constraint => cellFlagged(constraint, ...coordinate))\r\n             .filter(constraint => constraint !== null) as Constraint[];\r\n         })\r\n         .addCase(\"REGENERATE_BOARD\", (state, _: RegenerateBoardAction) => {\r\n           Object.assign(state, INITIAL_STATE);\r\n         })\r\n         .addCase(\"LOAD_BOARD\", (state, _: LoadBoardAction) => {\r\n           Object.assign(state, INITIAL_STATE);\r\n         })\r\n         .addCase(\r\n           \"DELETE_CONSTRAINT\",\r\n           (state, { index }: DeleteConstraintAction) => {\r\n             state.complexConstraints.splice(index, 1);\r\n             resetSelected(state);\r\n           }\r\n         )\r\n         .addCase(\r\n           \"ADD_CONSTRAINTS\",\r\n           (state, { constraints }: AddConstraintsAction) => {\r\n             state.complexConstraints.push(...constraints);\r\n           }\r\n         )\r\n         .build();\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { reducer as boardReducer } from \"../board/Reducer\";\r\nimport {reducer as constraintReducer} from \"../constraints/Reducer\";\r\nimport {reducer as optionsReducer} from \"../options/Reducer\";\r\n\r\nexport type RootState = ReturnType<typeof reducer>;\r\nexport const reducer = combineReducers({\r\n  board: boardReducer,\r\n  constraints: constraintReducer,\r\n  options: optionsReducer\r\n});\r\n","import { createStore } from \"redux\";\r\nimport { reducer } from \"./Reducer\";\r\nimport {\r\n  devToolsEnhancer\r\n} from \"redux-devtools-extension\";\r\n\r\nexport const store = createStore(reducer, devToolsEnhancer({}));\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./Styles.scss\";\r\nimport Overlay, { targetColor, firstColor, secondColor } from \"../hover/ConstraintOverlay\";\r\nimport Board from \"../board/Board\";\r\nimport CoordsOverlay from \"../coordsOverlay/CoordsOverlay\";\r\nimport AllOptions from \"../options/AllOptionsPanel\";\r\nimport Title from \"./Title\";\r\nimport SelectedConstraints from \"../constraints/components/SelectedConstraints\";\r\nimport ConstraintActions from \"../constraints/components/ConstraintActions\";\r\nimport ConstraintList from \"../constraints/components/ConstraintList\";\r\nimport { store } from \"./Store\";\r\nimport {\r\n  selectTargets,\r\n  selectFirstWrapped,\r\n  selectSecondWrapped\r\n} from \"../constraints/Selectors\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"columns\">\r\n        <div className=\"leftColumn\">\r\n          <Title />\r\n          <div className=\"board\">\r\n            <CoordsOverlay />\r\n            <Overlay\r\n              selectConstraints={selectTargets}\r\n              colorSelector={targetColor}\r\n            />\r\n            <Overlay\r\n              selectConstraints={selectFirstWrapped}\r\n              colorSelector={firstColor}\r\n            />\r\n            <Overlay\r\n              selectConstraints={selectSecondWrapped}\r\n              colorSelector={secondColor}\r\n            />\r\n            <Board />\r\n          </div>\r\n          <SelectedConstraints />\r\n          <ConstraintActions />\r\n          <ConstraintList />\r\n        </div>\r\n        <div className=\"rightColumn\">\r\n          <AllOptions />\r\n        </div>\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/Component';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}